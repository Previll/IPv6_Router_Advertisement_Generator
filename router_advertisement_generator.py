import os
import time

from scapy.all import sniff, ICMPv6ND_RA, ICMPv6ND_NS, ICMPv6ND_RS, IPv6, Ether, IP, TCP, UDP, rdpcap, wrpcap, ICMP
from scapy.all import *
import threading



interface = 'wlo1'

# Define the directory used to store the pcap template files
pcap_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'template_pcaps')

# Create the directory if it doesn't exist
if not os.path.exists(pcap_dir):
    os.makedirs(pcap_dir)
# Set the path for the pcap file
pcap_file = os.path.join(pcap_dir, 'router_advertisement.pcap')
def get_link_local_address(interface):
    interface = conf.ifaces.dev_from_name(interface)
    for ip in interface.ips[6]:
        if ip.startswith("fe80::"):
            return ip
    return None


def capture_ra(packet):
    
    # Check if the packet is an ICMPv6 Router Advertisement
    if packet.haslayer(ICMPv6ND_RA):
        print(f"Router Advertisement detected: {packet.summary()}")
        
        # Capture only the first Router Advertisement
        print(f"Saving the Captured Router Advertisement to {pcap_file}...")
        # Save the packet to the pcap file
        wrpcap(pcap_file,packet)
        print("Router Advertisement saved.")
        global template_packet
        template_packet = packet
            
            
def validate_template_pcap():
    global template_packet
    try: 
        packets =  rdpcap(pcap_file)
        if len(packets) > 1:
            print("WARNING! pcap file contains more than one packet.... assuming first packet is ICMP v6 Router Advertisement...")
        icmpv6_ra_packet = packets[0]
        if not packets[0].haslayer(ICMPv6ND_RA):
            print(f"ERROR: the packet in the pcap template {pcap_file} is not an ICMPv6 Router Advertisement packet... Aborting the script ")
            quit()
        template_packet = icmpv6_ra_packet
    except:
        print("Error validating template pcap file...\r\n")
        print(f"Please replace the pcap file with a valid icmpv6 RA packet or alternatively delete {pcap_file} and re-run this script to retry capturing a valid icmpv6 RA packet.")
        quit()

def main():
    # Check for existing Router Advertisement pcap file that will act as a template for the 
    # router advertisements generated by this script, with fields modified as per the .conf # configuration file parameters. 
    global template_packet
    if not (os.path.exists(pcap_file)):
        listen_for_router_advertisement_packets()
    else:
        validate_template_pcap()
    template_packet = modify_template_packet()
    unsolicited_ra_thread = threading.Thread(target=periodically_send_unsolicited_router_advertisement, daemon=True)
    unsolicited_ra_thread.start()
    solicited_ra_sniffer = sniff(prn=listen_for_router_solicitation_packets,store=False)
    #solicited_ra_sniffer.start()
    
    #solicited_ra_sniffer.join()
    

def listen_for_router_advertisement_packets():
    print("Listening for Router Advertisements (ICMPv6 RA)...")
    icmpv6_ra_sniffer = AsyncSniffer(prn=capture_ra, filter="icmp6 && ip6[40] == 134", store=False,count=1,quiet=True)
    icmpv6_ra_sniffer.start()
    icmpv6_ra_sniffer.join()

def modify_template_packet():
    ### TODO: read conf file to allow customization of what you want to modify. 
    modified_packet = template_packet.copy()
    modified_packet["ICMPv6NDOptRDNSS"].dns = ['2620:fe::fe']
    return modified_packet
    
def periodically_send_unsolicited_router_advertisement():
    global template_packet
    
    while True:
        for interface in conf.ifaces:
            ra_unsolicited_packet = template_packet.copy()

            # Send the RA using the pcap template
            print(f"Sending unsolicited Router Advertisement on interface {interface}...")
            ra_unsolicited_packet['IPv6'].src =  get_link_local_address(interface)
            ra_unsolicited_packet[Ether].src = get_if_hwaddr(interface)
            ra_unsolicited_packet[Ether].dst = '33:33:00:00:00:01'
            ra_unsolicited_packet.getlayer(ICMPv6ND_RA).cksum = None
            sendp(ra_unsolicited_packet, iface=interface)
            time.sleep(10)  # Wait for 60 seconds before sending the next unsolicited RA

    

def listen_for_router_solicitation_packets(packet):
    global template_packet
    #print("Received Router Solicitation packet...")
    # Check if the packet is an ICMPv6 Router Solicitation
    if  packet.haslayer(ICMPv6ND_RS):
        print(f"neighbor solicit from {packet['Ether'].src} and {packet['IPv6'].src} on interface {packet.sniffed_on}")
        print(packet.summary())
        # Create a copy of the RA packet and modify the target address to respond to the source
        ra_response = template_packet.copy()
        # modify the destination address to respond to the source of the ICMPv6ND
        ra_response[IPv6].dst = packet[IPv6].src
        ra_response[IPv6].src = get_link_local_address(packet.sniffed_on)
        ra_response[Ether].src = get_if_hwaddr(packet.sniffed_on)
        ra_response[Ether].dst = packet['Ether'].dst
        ra_response.getlayer(ICMPv6ND_RA).cksum = None
        ra_response['ICMPv6NDOptSrcLLAddr'].lladdr = get_if_hwaddr(packet.sniffed_on)
        print(ra_response.summary())
        sendp(ra_response,iface=packet.sniffed_on)


    
if __name__ == "__main__":
    main()
